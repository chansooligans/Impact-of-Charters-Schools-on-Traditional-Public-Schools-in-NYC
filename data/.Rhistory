demographics_2[,cols_to_keep])
demographics$PovertyPercent = as.numeric(gsub(" ","",demographics$PovertyPercent))
# Data Exported from QGIS (schools merged with zones)
##############################
qgis_exports = list.files('data/qgis_exports/')
qgis_list = list()
qgis_list = lapply(paste('data/qgis_exports/',qgis_exports,sep='/'), read.csv, stringsAsFactors = F)
# Then combine list of data frames into single dataframe
qgis_df = rbind.fill(qgis_list)
cols_to_keep = c('DBN','esid_no')
#### Using Only Latest Zones
# Subset Dataframe
qgis_df = qgis_df[qgis_df$math==1 & qgis_df$Year == 2018,cols_to_keep]
qgis_df = unique(qgis_df)
########################################################################################################################
# Aggregate Data
########################################################################################################################
##############################
##### Data from NYC DOE (2013-2018)
##############################
# There are four DOE files: charter_math, charter_ela, all_math, and all_ela.
# I need to make sure that they all have consistent column names, then merge them.
# Fix NYC DOE Column Names
nyc_doe_columns = c('DBN','School.Name','Grade','Year','Category','Number.Tested','Mean.Scale.Score',
paste(rep(c("Lvl1","Lvl2","Lvl3","Lvl4","Lvl3_4"),each=2),
rep(c('_cnt','_per'),5),
sep=''))
colnames(charter_math) = colnames(charter_ela) = colnames(all_math) = colnames(all_ela) = nyc_doe_columns
# Bind the four files. Create columns called charter, math, and ela for each file.
df = rbind(charter_math %>%
mutate(charter = TRUE,
math = TRUE,
ela = FALSE),
charter_ela %>%
mutate(charter = TRUE,
math = FALSE,
ela = TRUE),
all_math %>%
mutate(charter = FALSE,
math = TRUE,
ela = FALSE),
all_ela %>%
mutate(charter = FALSE,
math = FALSE,
ela = TRUE))
# Subset data to include only these columns
df = df %>% select('DBN','Grade','Year','Number.Tested','Mean.Scale.Score','charter','math')
# Change scores from character to numeric
df$Mean.Scale.Score = as.numeric(df$Mean.Scale.Score)
# df = df[which(!is.na(df$Mean.Scale.Score)),]
##############################
##### Data from NYC Open Data (2006-2012) and (2013-2018)
##############################
#### 2006 - 2012
##############################
# Before merging, I need to create indicators in the data letting me know
# whether the data is from Math vs ELA or Charter vs TPS
math_files_06 = sapply('Math',grepl,files_nyc_open06,fixed='True')
charter_files_06 = sapply('Charter',grepl,files_nyc_open06,fixed='True')
for(i in 1:4){
nyc_open06[[i]]$math = math_files_06[i]
nyc_open06[[i]]$charter = charter_files_06[i]
}
# Bind Datasets, subset to selected columns, convert scores to numeric
nyc_open06_full = rbind.fill(nyc_open06)
cols_to_keep_06 = c('DBN','Grade','Year','Number.Tested','Mean.Scale.Score','charter','math')
nyc_open06_full = nyc_open06_full[,cols_to_keep_06]
nyc_open06_full$Mean.Scale.Score = as.numeric(as.character(nyc_open06_full$Mean.Scale.Score))
#### 2013 - 2018
##############################
math_files_13 = sapply('Math',grepl,files_nyc_open13,fixed='True')
charter_files_13 = sapply('Charter',grepl,files_nyc_open13,fixed='True')
for(i in 1:4){
nyc_open13[[i]]$math = math_files_13[i]
nyc_open13[[i]]$charter = charter_files_13[i]
}
# Bind datasets
nyc_open13_full = rbind.fill(nyc_open13)
# Category Column only in 2013-2018 that provides scores for groups such as ELL.
# Exclude these observations by only keeping data where Category == 'All Students'
nyc_open13_full = nyc_open13_full %>%
filter(Category == 'All Students')
# Subset to selected columns, convert scores to numeric
cols_to_keep_13 = c('DBN','Grade','Year','Number.Tested','Mean.Scale.Score','charter','math')
nyc_open13_full = nyc_open13_full[,cols_to_keep_13]
nyc_open13_full$Mean.Scale.Score = as.numeric(as.character(nyc_open13_full$Mean.Scale.Score))
nyc_open13_full$Number.Tested = as.numeric(as.character(nyc_open13_full$Number.Tested))
##############################
# For years 2013-2018, I have both Open Data AND DOE data.
# Open Data contains data that is not included in the DOE Data.
# So I want to identify the rows that are contained in Open Data
# but NOT in DOE data, then merge the two files, excluding duplicates.
##############################
# Quick Inventory of DOE data
# DOE Data
df$math = as.logical(df$math)
doe_inventory = df %>%
group_by(DBN, Year, Grade, math) %>%
dplyr::summarise(n())
# Create ID column
doe_inventory = doe_inventory %>%
mutate(id = paste(DBN, Year, Grade, math))
# NYC Open Data
open_inventory = nyc_open13_full %>%
group_by(DBN, Year, Grade, math) %>%
dplyr::summarise(n())
# Create ID Column
open_inventory = open_inventory %>%
mutate(id = paste(DBN, Year, Grade, math))
# Cross Check IDs
# Subset NYC Open Data to Append to Master Dataset
open_data_to_include = open_inventory[!open_inventory$id %in% doe_inventory$id,]
##############################
# Bind Datasets
##############################
df = df %>%
bind_rows(nyc_open06_full) %>%
bind_rows(nyc_open13_full %>%
mutate(id = paste(DBN, Year, Grade, math)) %>%
filter(id %in% open_data_to_include$id) %>%
select(-id))
##############################
##### Add Location and selected Demographics (will add race-related variables next)
##############################
# Join Location with Master File (Location only contains 2013-2018)
master = df %>%
left_join(locations, by = c('DBN' = 'ATS.SYSTEM.CODE', 'Year' = 'FISCAL_YEAR'))
# Join Locations for 2006-2012
master[master$Year<2013,] = df[df$Year<2013,] %>%
left_join(locations[locations$FISCAL_YEAR==2013,], by = c('DBN' = 'ATS.SYSTEM.CODE')) %>%
select(-FISCAL_YEAR)
# Join Demographics with Master File
master = master %>%
left_join(demographics[,c('DBN','Year','Students.with.Disabilities','English.Language.Learners','PovertyPercent')], by = c('DBN','Year')) %>%
mutate(Disabled = as.numeric(Students.with.Disabilities),
Ell = as.numeric(English.Language.Learners),
PovertyPercent = as.numeric(PovertyPercent)) %>%
dplyr::select(-Students.with.Disabilities,-English.Language.Learners)
# Join School Zone ID from QGIS
master = master %>%
left_join(qgis_df, by=c('DBN'))
########################################################################################################################
# Diversity Index
########################################################################################################################
##############################
##### Diversity Index
##############################
# Shannon Entropy by School
##############################
diversity = demographics %>%
dplyr::select(DBN, Year, Total.Enrollment, Asian, Black, Hispanic, White)
# percents
percents = diversity[,c(4:7)]/ diversity$Total.Enrollment
colnames(percents) = paste(colnames(percents),'Percent',sep='')
# shannon entropy
shannon = -apply(percents * log(percents+.001),1,sum)
diversity = cbind(diversity,shannon,percents)
# Merge with Master
master = master %>%
left_join(diversity, by = c('DBN', 'Year'))
# Shannon Entropy of TPS by NTA
##############################
diversity = master %>%
filter(charter == 0) %>%
replace(., is.na(.), 0) %>%
group_by(NTA,Year) %>%
dplyr::summarise(Total.Enrollment = sum(Total.Enrollment),
Asian = sum(Asian),
Black = sum(Black),
Hispanic = sum(Hispanic),
White = sum(White))
diversity = as.data.frame(diversity)
# percents
percents = diversity[,c(4:7)]/ diversity$Total.Enrollment
# shannon entropy
shannon_nta = -apply(percents * log(percents+.001),1,sum)
diversity = cbind(diversity[,c('NTA','Year')],shannon_nta)
# Merge with Master
master = master %>%
left_join(diversity, by = c('NTA', 'Year'))
# Shannon Entropy of TPS by Community School District
##############################
diversity = master %>%
filter(charter == 0) %>%
replace(., is.na(.), 0) %>%
group_by(GEOGRAPHICAL_DISTRICT_CODE,Year) %>%
dplyr::summarise(Total.Enrollment = sum(Total.Enrollment),
Asian = sum(Asian),
Black = sum(Black),
Hispanic = sum(Hispanic),
White = sum(White))
diversity = as.data.frame(diversity)
# percents
percents = diversity[,c(4:7)]/ diversity$Total.Enrollment
# shannon entropy
shannon_cd = -apply(percents * log(percents+.001),1,sum)
diversity = cbind(diversity[,c('GEOGRAPHICAL_DISTRICT_CODE','Year')],shannon_cd)
# Merge with Master
master = master %>%
left_join(diversity, by = c('GEOGRAPHICAL_DISTRICT_CODE', 'Year'))
########################################################################################################################
# Prepare Data for Modeling
########################################################################################################################
# Filter / Subset Dataset
##############################
master = master %>%
filter(GEOGRAPHICAL_DISTRICT_CODE != 0) %>%
filter(Grade != 'All Grades') %>%
mutate(year_sch = paste(DBN,Year,sep='_'))
# Generate Year/Grade Column
##############################
master$GradeYear = paste(master$math,master$Grade,master$Year,sep='_')
# Remove Missing Scores
##############################
z = which(is.na(master$Mean.Scale.Score))
master = master[-z,]
# Standardize Scores for Math by Grade and Year
##############################
mean_scores_grade_year = tapply(master$Mean.Scale.Score,master$GradeYear,mean)
grade_sd_year = tapply(master$Mean.Scale.Score,master$GradeYear,sd)
grade_years = names(mean_scores_grade_year)
for(i in 1:length(grade_years)){
master$Mean.Scale.Score[master$GradeYear==grade_years[i]] = (master$Mean.Scale.Score[master$GradeYear==grade_years[i]] - mean_scores_grade_year[i]) / grade_sd_year[i]
}
# Charter Count (Zone)
#########################
temp = master %>%
group_by(esid_no, Year) %>%
dplyr::summarize(charter_count = uniqueN(DBN[charter == 1]),
charter_share = uniqueN(DBN[charter == 1])/n_distinct(DBN))
master = master %>%
left_join(temp, by=c('Year','esid_no'))
# Charter Count (District)
#########################
temp = master %>%
group_by(GEOGRAPHICAL_DISTRICT_CODE, Year) %>%
dplyr::summarize(charter_count_district = uniqueN(DBN[charter == 1]),
charter_share_district = uniqueN(DBN[charter == 1])/n_distinct(DBN))
master = master %>%
left_join(temp, by=c('Year','GEOGRAPHICAL_DISTRICT_CODE'))
# Charter Performance (Zone)
#########################
temp = master %>%
filter(charter == 1) %>%
group_by(esid_no, Year) %>%
dplyr::summarize(charter_score = mean(Mean.Scale.Score))
master = master %>%
left_join(temp, by=c('Year','esid_no'))
# Cohorts
#########################
master$cohort = master$Year-(as.numeric(master$Grade)-1)
# New Charters in Zone
#########################
new_charters = master %>%
group_by(esid_no,Year) %>%
dplyr::summarize(n = mean(charter_count))
new_charters = new_charters %>%
mutate(Year2 = Year - 1) %>%
left_join(new_charters, by = c('Year2' = 'Year', 'esid_no' = 'esid_no')) %>%
mutate(new_charts = n.x - n.y) %>%
select(Year, esid_no, new_charts)
new_charters$new_charts[is.na(new_charters$new_charts)] = 0
master = master %>%
left_join(new_charters, by = c('Year', 'esid_no'))
# Rename some columns for convenience
colnames(master)[8] = 'district'
colnames(master) = tolower(colnames(master))
########################################################################################################################
# Export
########################################################################################################################
# Export
write.csv(master,'data/master.csv', row.names = F)
temp = master %>%
group_by(district, year, grade, charter_share_district) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = district, colour = charter_share_district), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~grade)
setwd('/Users/Chansoo/Desktop/Charter_School_Project/data/')
#########################
# Plotting tool
#########################
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
#########################
# Load Data
#########################
rm(list=ls())
master = read.csv('master.csv')
master = master %>%
filter(math == 1,
grade < 6)
set.seed(1234)
temp = master %>%
group_by(district, year, grade, charter_share_district) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = district, colour = charter_share_district), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~grade)
temp = master %>%
group_by(district, dbn, year, grade, charter_count) %>%
dplyr::summarise(y = mean(mean.scale.score))
#########################
# Load Data
#########################
rm(list=ls())
master = read.csv('master.csv')
master = master %>%
filter(math == 1)
set.seed(1234)
temp = master %>%
group_by(district, year, grade, charter_share_district) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = district, colour = charter_share_district), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~grade)
temp = master %>%
group_by(district, dbn, year, grade, charter_count) %>%
dplyr::summarise(y = mean(mean.scale.score))
temp = master %>%
group_by(district, dbn, year, grade, charter_share) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = district, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~grade)
temp = master %>%
filter(grade==4) %>%
group_by(district, dbn, year, grade, charter_share) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = district, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~grade)
ggplot(data = temp, aes(x=year, y = y, group = district, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~district)
temp = master %>%
filter(grade==4) %>%
group_by(district, dbn, year, grade, charter_share) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = dbn, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="red") +
ggtitle("Scores over time by grade") +
labs(colour = '% charter \n in district') +
facet_wrap(~district)
ggplot(data = temp, aes(x=year, y = y, group = dbn, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="blue") +
ggtitle("Scores over time by district") +
labs(colour = '% charter \n in district') +
facet_wrap(~district)
temp = master %>%
filter(grade==4) %>%
group_by(district, dbn, year, grade, charter_share) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = dbn, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="blue") +
ggtitle("Scores over time by district") +
labs(colour = '% charter \n in zone') +
facet_wrap(~district)
master$district
unique(master$district)
sort(unique(master$district))
temp = master %>%
filter(grade==4,
district %in% 1:4) %>%
group_by(district, dbn, year, grade, charter_share) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = dbn, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="blue") +
ggtitle("Scores over time by district") +
labs(colour = '% charter \n in zone') +
facet_wrap(~district)
temp = master %>%
filter(grade==4,
district %in% 1:16) %>%
group_by(district, dbn, year, grade, charter_share) %>%
dplyr::summarise(y = mean(mean.scale.score))
ggplot(data = temp, aes(x=year, y = y, group = dbn, colour = charter_share), alpha = 0.8) +
geom_line() +
geom_point() +
scale_color_gradient(low="grey", high="blue") +
ggtitle("Scores over time by district") +
labs(colour = '% charter \n in zone') +
facet_wrap(~district)
model_names = c('Logit', 'Mahalo.',
'CBPS 1', 'CBPS 2',
'EB - 1', 'EB - 2')
lin_CI1 = lin_mse1 = lin_bias1 = linCIcov1 = matrix(nrow=4,
ncol=length(model_names),
dimnames = list(paste('sim',1:4),model_names))
results_1 = list()
SATE_1 = list()
k_s = c(1,2,5,6)
for(k in 1:4){
load(paste('sim_results/sim',k_s[k],'_n2000_nsims1000_nloFALSE.RDATA',sep=''))
colnames(lin_results) = model_names
lin_bias1[k,] = (SATE[[k]] - apply(lin_results,2,mean)) / SATE[[k]]
lin_mse1[k,] = apply((SATE[[k]]-lin_results)^2,2,mean)
lin_CI1[k,] = apply(ci_results,2,mean)
results_1[[k]] = melt(lin_results)
SATE_1[[k]] = SATE[[k]]
}
lin_CI2 = lin_mse2 = lin_bias2 = linCIcov2 = matrix(nrow=4,
ncol=length(model_names),
dimnames = list(paste('sim',1:4),model_names))
results_2 = list()
SATE_2 = list()
for(k in 1:4){
load(paste('sim_results/sim',k_s[k],'_n2000_nsims1000_nloTRUE.RDATA',sep=''))
colnames(lin_results) = model_names
lin_bias2[k,] = (SATE[[k]] - apply(lin_results,2,mean)) / SATE[[k]]
lin_mse2[k,] = apply((SATE[[k]]-lin_results)^2,2,mean)
lin_CI2[k,] = apply(ci_results,2,mean)
results_2[[k]] = melt(lin_results)
SATE_2[[k]] = SATE[[k]]
}
p1 = p2 = p3 = list()
p1[[1]] = ggplot(melt(lin_bias1), aes(x=Var2, y=abs(value), group=Var1, col=Var1)) +
geom_point(legend=FALSE) +
geom_line(legend=FALSE) +
labs(y='bias')
p1[[2]] = ggplot(melt(lin_mse1), aes(x=Var2, y=abs(value), group=Var1, col=Var1)) +
geom_point() +
geom_line() +
labs(y='RMSE',
title='Linear Outcome Model')
p1[[3]] = ggplot(melt(lin_CI1), aes(x=Var2, y=abs(value), group=Var1, col=Var1)) +
geom_point() +
geom_line() +
labs(y='% iterations in 95%-CI')
p2[[1]] = ggplot(melt(lin_bias2), aes(x=Var2, y=abs(value), group=Var1, col=Var1)) +
geom_point() +
geom_line() +
labs(y='bias')
p2[[2]] = ggplot(melt(lin_mse2), aes(x=Var2, y=abs(value), group=Var1, col=Var1)) +
geom_point() +
geom_line() +
labs(y='RMSE',
title='Non-Linear Outcome Model')
p2[[3]] = ggplot(melt(lin_CI2), aes(x=Var2, y=abs(value), group=Var1, col=Var1)) +
geom_point() +
geom_line() +
labs(y='% iterations in 95%-CI')
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
kable(round(lin_bias1,3),
caption='Linear Outcome Model -- Linear Regression: Bias')
kable(round(sqrt(lin_mse1),3),
caption='Linear Outcome Model -- Linear Regression: RMSE')
kable(lin_CI1,
caption='Linear Outcome Model -- Linear Regression: CI - 95%')
p1[[2]]
ggarrange(p1[[1]],p1[[3]], ncol=1, nrow=2, common.legend = TRUE, legend="right")
kable(round(lin_bias2,3),
caption='Non-Linear Outcome Model -- Linear Regression: Bias')
kable(round(sqrt(lin_mse2),3),
caption='Non-Linear Outcome Model -- Linear Regression: RMSE')
kable(lin_CI2,
caption='Non-Linear Outcome Model -- Linear Regression: CI - 95%')
p2[[2]]
ggarrange(p2[[1]],p2[[3]], ncol=1, nrow=2, common.legend = TRUE, legend="right")
